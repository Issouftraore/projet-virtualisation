# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "base"

##############################################################################################
  # Configuration de la première VM
config.vm.define "web" do |web|
  # Installation de la machine viruelle Ubuntu-22.04
  web.vm.box = "bento/ubuntu-22.04" 
  # COnfiguration reseau pour la VM
  web.vm.network "private_network", ip: "192.168.56.10"
  # Configuration du systeme de ports sur la VM et son equivalent sur l'hôte
  web.vm.network "forwarded_port", guest:3000, host:3000
  web.vm.network :forwarded_port, guest:22, host:2221
  # COnfiguration du partage de dossier entre l'hôte et la VM
  web.vm.synced_folder "../appli", "/var/www/html", type: "virtualbox"
  # Configuration des ressources 
  web.vm.provider "virtualbox" do |vb|
    vb.memory = "1024"
  end
   # Provisionnement des outils et logiciels qui vont demarrer avec la VM
  web.vm.provision "shell", path: "nextJS_install.sh"
 
end
################################################################################################
  # Configuration de la deuxième machine
  config.vm.define "app" do |app|
     # Installation de la machine viruelle Ubuntu-24.04
    app.vm.box = "bento/ubuntu-24.04" 
    # COnfiguration reseau pour la VM
    app.vm.network "private_network", ip: "192.168.56.20"
    # Configuration du systeme de ports sur la VM et son equivalent sur l'hôte
    app.vm.network "forwarded_port", guest:8000, host:8080
    app.vm.network :forwarded_port, guest:22, host:2220
     # COnfiguration du partage de dossier entre l'hôte et la VM
    app.vm.synced_folder "../appli", "/var/www/html", type: "virtualbox"
     # Configuration des ressources 
    app.vm.provider "virtualbox" do |vb|
     
      vb.memory = "1024"
    end
    # Provisionnement des outils et logiciels qui vont demarrer avec la VM
    app.vm.provision "shell", path: "laravel_install.sh"
  end
################################################################################################
  # Configuration de la troisieme machine
  config.vm.define "db" do |db|
     # Installation de la machine viruelle Ubuntu-22.04
    db.vm.box = "bento/ubuntu-22.04" 
     # COnfiguration reseau pour la VM
    db.vm.network "private_network", ip: "192.168.56.30"
    db.vm.network "forwarded_port", guest:3306, host:3310
    db.vm.network :forwarded_port, guest:22, host:2223
    # COnfiguration du partage de dossier entre l'hôte et la VM
    db.vm.synced_folder "../appli", "/var/www/html", type: "virtualbox"
     # Configuration des ressources 
    db.vm.provider "virtualbox" do |vb|
           vb.memory = "1024"
      end
     # Provisionnement des outils et logiciels qui vont demarrer avec la VM
    db.vm.provision "shell", path: "mysql_install.sh"
  end
################################################################################################
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
